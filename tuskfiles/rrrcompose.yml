---
usage: |
  Generate a docker compose configuration for running rrr
options:
  networkid:
    default: "53456"
  netrestrict:
    default: 172.19.0.10/24
  gastarget:
    usage: "sets the --miner.gastarget option for the nodes"
    default: "18200000"
  gaslimit:
    usage: "sets the --miner.gaslimit option for the nodes"
    default: "18200000"
  recommit:
    usage: "sets the --miner.recommit option for the nodes."
    default: "2s"

args:
  configdir:
    usage: >
      The config root directory.

run:
  - task:
      name: configure
      args:
        - ${configdir}
  - command:
      exec: |
        set -e

        TUSKDIR=$(pwd)

        CONFIGVARS="${configvars} rrr_src gendoc_extra gendoc_wallet gendoc_balance numcandidates numendorsers committeequorum intentphase confirmphase roundlength"
        eval ${READ_CONFIG}
        if ${configshow}; then eval ${SHOW_CONFIG}; exit 0; fi

        cd ${launchdir} && cd ${configdir}

        ETHERBASE=${gendoc_wallet}

        # For a development & experimental setup its not clear it really
        # matters what address we use for ETHERBASE. But using node0 seems like
        # a default that could be convenient.
        source ${pyenv}/bin/activate

        export ETHERBASE
        ETHERBASE=$(cat <<PYEND | python3
        import os, sys, pathlib, coincurve, sha3
        if os.environ["ETHERBASE"] or os.environ["ETHERBASE"] == "0x0000000000000000000000000000000000000000":
            sys.exit(-1)
        with open(pathlib.Path(os.environ["nodesdir"]).joinpath("node0", "key")) as f:
            key = coincurve.PrivateKey.from_hex(f.read())
            pub = key.public_key.format(compressed=False)[1:]
            print("0x" + sha3.keccak_256(pub).digest()[-20:].hex())
        PYEND
        )

        cat <<END > env.env
        COMPOSE_PROJECT_NAME=${name}
        RRR_CONSENSUS_OPTS="\
        --rrr.nc ${numcandidates} \
        --rrr.ne ${numendorsers} \
        --rrr.q ${committeequorum} \
        --rrr.ta ${activehorizon} \
        --rrr.intentphase ${intentphase} \
        --rrr.confirmphase ${confirmphase} \
        --rrr.roundlength ${roundlength}"
        NETWORKID=${networkid}
        NETRESTRICT=${netrestrict}
        ETHERBASE=${ETHERBASE}
        QUORUM_SRC=${quorum_src}
        RRR_SRC=${rrr_src}
        NODESDIR=${nodesdir}
        GETH_IMAGE= ${geth_image}
        DELVE_IMAGE=${delve_image}
        GAS_OPTS="${RECOMMIT:+ --miner.recommit "${RECOMMIT}"} --miner.gastarget ${gastarget} --miner.gaslimit ${gaslimit}"
        END
        cat env.env
        echo "Wrote env.env"

        cat <<END > bootnodes.env
        BOOTNODE0_PUB=$(cat ${nodesdir}/node0/enode)
        END

        cat bootnodes.env
        echo "Wrote bootnodes.env"

        cat env.env bootnodes.env > .env
        cat .env
        echo "Wrote .env"

        # Merge in the appropriate number of copies of node.yml to the
        # docker-compose.yml we are generating. As we do that add the
        # numeric suffices to each nodes service entry and the working_dir
        # it uses
        cp ${TUSKDIR}/compose/rrr/base.yml .
        cp ${TUSKDIR}/compose/rrr/node.yml .
        cp base.yml docker-compose.yml

        # each document fragment has to be valid. so they all need the
        # x-node-defaults anchor to be defined.
        cat <<END > tmp.yml
        x-node-defaults:
          &node-defaults
        END

        PORT=8300
        for i in $(seq 0 $((${maxnodes} - 1)))
        do
            VAL=$i EXPOSED="\"${PORT}:\"" yq eval '
              .node |= .working_dir += env(VAL) |
              del(.x-node-defaults) |
              .node.ports[0] |= . = env(EXPOSED) + . |
              with_entries(.key |= .  + env(VAL))
            ' node.yml
            PORT=$((PORT + 1))
        done >> tmp.yml
        yq eval-all --inplace '
            select(fileIndex == 0) * {"services": select(fileIndex == 1)}
            | del(.services.x-node-defaults)' docker-compose.yml tmp.yml
        # yq eval-all --inplace 'select(fileIndex == 0) * {"services": select(fileIndex == 1)} | del(.services.x-node-defaults)' docker-compose.yml tmp.yml

